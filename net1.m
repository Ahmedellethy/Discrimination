function [y1] = net1(x1)
%NET1 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Jan-2021 21:39:19.
% 
% [y1] = net1(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.44;
x1_step1.gain = 0.185701021355617;
x1_step1.ymin = -1;

% Layer 1
b1 = [12.855537410892090122;9.9207796348712875556;8.1699122250579865323;6.5922096491842694377;4.8799369000389685169;1.7374821120507182304;6.01438383327414261;-8.4187310893235860476;10.953435337155267959;14.582204854213047795];
IW1_1 = [-15.268099952420975285;-14.13085246917356308;-15.850921949664835253;-12.741183263295708272;-15.080570865877364284;11.860197302296729305;16.264511613220822284;-16.520220871623994441;14.470839748555833992;13.319667186477238019];

% Layer 2
b2 = -0.50616116646782671751;
LW2_1 = [0.48609407159956641298 -0.34048908655455800698 -1.4539074538452498864 1.5839641322781825572 -0.12146538161143917434 0.11333325439604903517 0.11229610407341636402 -0.24576667667424184627 -0.013522860670423231949 -0.18161128487292685363];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.079968012794882;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
