function [y1] = net3(x1)
%NET3 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Jan-2021 21:40:55.
% 
% [y1] = net3(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 1.37;
x1_step1.gain = 0.217155266015201;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.36661268124886881;-13.279858241038095201;-5.8606181922171129983;5.5039878781160309629;-4.4903181301083705534;0.75538763572871836516;-6.0764741156055901428;4.9347104963177050863;-7.9494302881303307018;13.849253449781690151];
IW1_1 = [15.696415209989909911;14.972487510325903415;12.999014108152229241;-16.578647317454020538;12.330900605655566338;21.314460118371567177;-14.360963593315442921;12.45667288825289809;-16.562254860214956409;14.125011225095761347];

% Layer 2
b2 = -0.71932188753517978252;
LW2_1 = [1.3695393209211479402 -1.6672112318136373954 0.56732812647642372195 -1.2391296177440032089 -1.7424170163582375359 0.06685643526848150664 -2.2478872087548893433 -1.3454153062178151323 0.4534166531897195207 0.0042293632700008357977];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.079968012794882;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
