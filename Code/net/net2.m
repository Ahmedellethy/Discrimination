function [y1] = net2(x1)
%NET2 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Jan-2021 21:40:16.
% 
% [y1] = net2(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.44;
x1_step1.gain = 0.185701021355617;
x1_step1.ymin = -1;

% Layer 1
b1 = [-14.110728642578871828;10.986379662902303167;7.7613772165980927653;4.6587133884919387228;1.5566775391549056984;-1.6689240912069460698;5.3538958255465196601;-8.0094124060540039522;10.924871413490743421;14.115413230518885968];
IW1_1 = [13.883729727869582149;-13.920911512935148835;-13.998000577027969626;-14.005055299974417338;-13.999903745993087512;-14.065649670620235412;13.835362412533593002;-13.863938396408991949;13.975945857446593124;13.884901188634916736];

% Layer 2
b2 = 0.17732187471242905064;
LW2_1 = [0.69268660375712620692 0.049898382370465399482 0.041822466938810864967 -0.034890671663794892154 0.075754787283708283074 -0.48332651734590237336 0.28299759419020265039 -0.32548257283288256625 -0.058122711986054120814 0.47214811011338631008];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
