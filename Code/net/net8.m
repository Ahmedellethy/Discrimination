function [y1] = net8(x1)
%NET8 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Jan-2021 21:42:02.
% 
% [y1] = net8(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [2.44;1.37;1.04];
x1_step1.gain = [0.185701021355617;0.217155266015201;1.13636363636364];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.6893780997724725523;-2.3572508373264406956;1.3833528965447514647;-0.84854558921528855375;-0.272667535927270277;0.2898592906573468353;0.71550284766682470394;-0.045750309112458364957;2.5664238384137614268;-3.0192841796145617472];
IW1_1 = [0.43257830047005868535 -2.7434543081681161958 -1.9900192126165752171;2.8478788157016832194 0.46777588610885084686 -0.60861384228945769603;-2.6183813159338238385 -1.798251364485649928 0.56194229320559840879;0.56160802212692184643 2.7973941521382155173 0.74347222356190012515;-2.0761651849467179787 -2.4014219382519379486 2.363774989788029135;1.1106203493077231315 2.25631703231855818 1.5682311246311417818;0.17141782237749558782 -3.9849237992572028588 5.1456711782229529462;-0.15692732114280624756 3.4834702556012588914 -3.1026253468812337033;2.1140396412720163788 0.55513900076015132434 1.5090256864358195799;-1.9984910271257272374 2.2143252839924345565 0.44939339831293917404];

% Layer 2
b2 = -0.78047143254553963398;
LW2_1 = [-0.2775164474127839731 -0.030050286194379938198 -0.10047840045452073598 0.13395356209718595197 -0.14723973601086040586 -0.19513767773602366806 -2.1014130139034756795 -1.2809039740408241226 -0.1901264594362950533 -0.71223979600035325355];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
