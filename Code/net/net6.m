function [y1] = net6(x1)
%NET6 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Jan-2021 21:41:35.
% 
% [y1] = net6(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 1.04;
x1_step1.gain = 1.13636363636364;
x1_step1.ymin = -1;

% Layer 1
b1 = [-14.159312146721243053;10.933871419919853452;7.9160735697758539686;4.6587104013378457523;1.416549288376520277;1.4100216203584421404;-14.765426287450546639;-10.151089901134319859;7.6155838518927092551;14.168187188109598651];
IW1_1 = [13.83415519725997278;-13.942662875767531716;-13.915076876337296952;-13.99460163409715463;-14.010956752236024769;14.120397654344467142;-32.107413508500968646;-21.845078417446757157;15.905935733872855309;13.825164766438678754];

% Layer 2
b2 = -0.024432758462369870422;
LW2_1 = [-0.00013803736610515021719 2.6849670071806898983e-05 -0.00013399137395635971884 0.00055754161692071605751 -0.0022313293331206055306 -0.0075240452757223295552 4.6662193825765703181 -5.0192535426920255048 -1.3507624465015473092 0.027766790091446773292];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
